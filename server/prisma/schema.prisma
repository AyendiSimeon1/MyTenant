generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  firstName     String?
  lastName      String?
  agencyName    String?
  agencyDetails Json?
  occupation    String?
  previousRent  String?
  resetToken    String?        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  payments      Payment[]
  applications  Application[] @relation("CreatedApplications")
  agencyId      String?       @unique
  agency        Agency?       @relation(fields: [agencyId], references: [id])
}

model Agency {
  id          String @id @default(uuid())
  companyName String?
  logo        String?
  streetName  String?
  area        String
  lga         String
  state       String
  userId      String? @unique
  user        User?   @relation 
 
  phone       String?
  properties  Property[]
  formSubmissions FormSubmission[]
}

model Property {
  id        Int      @id @default(autoincrement())
  address   String
  type      String
  createdAt DateTime @default(now())
  agencyId  String
  agency    Agency   @relation(fields: [agencyId], references: [id])
  formSubmissions FormSubmission[]
}

model Template {
  id        Int     @id @default(autoincrement())
  name      String
  fields    Json    // Store fields as JSON data
  createdAt DateTime @default(now())
  formSubmissions FormSubmission[]
}


model FormSubmission {
  id            String         @id @default(uuid())
  agencyId      String
  templateId    Int
  propertyId    Int
  data          Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  agency        Agency         @relation(fields: [agencyId], references: [id])
  template      Template       @relation(fields: [templateId], references: [id])
  property      Property       @relation(fields: [propertyId], references: [id])
}

model Reference {
  id                String   @id @default(uuid())
  name              String
  phone             String?
  email             String?
  contactInfo       String?
  relationship      String?
  isConfirmed       Boolean  @default(false)
  additionalDetails String?
  identityDocument  String?
}

model Application {
  id              String                 @id @default(uuid())
  title           String
  logoUrl         String?
  status          String?
  createdAt       DateTime               @default(now())
  agentId         String?
  agent           User?                  @relation(fields: [agentId], references: [id], name: "CreatedApplications")
  fields          Json
  uniqueLink      String?
  submissions     SubmittedApplication[] @relation("ApplicationSubmissions")
}
model SubmittedApplication {
  id            String      @id @default(uuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], name: "ApplicationSubmissions")
  fields        Json
}

model Payment {
  id        String   @id @default(uuid())
  tenantId  String
  amount    Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    User     @relation(fields: [tenantId], references: [id])
}
